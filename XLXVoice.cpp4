#include "XLXVoice.h"
#include "DMRDefines.h"
#include "Log.h"

#include <cstdio>
#include <cassert>
#include <cstring>

const unsigned int WAV_DATA_LENGTH = 320U;

const unsigned int DMR_FRAME_PER = 6U;

CXLXVoice::CXLXVoice(const std::string& directory, const std::string& language, unsigned int id, unsigned int slot, unsigned int tg) :
m_directory(directory),
m_language(language),
m_id(id),
m_slot(slot),
m_tg(tg),
m_dmr(),
m_embedded(),
m_timer(1000U, 0U, 500U),
m_wavData(NULL),
m_wavLength(0U),
m_pos(0U),
m_seqNo(0U),
m_dstId(0U),
m_sent(false)
{
    assert(!directory.empty());
    assert(!language.empty());
}

CXLXVoice::~CXLXVoice()
{
    delete[] m_wavData;
}

bool CXLXVoice::open()
{
    m_dmr.setFLCO(FLCO_USER_USER);
    m_dmr.setSlotNo(m_slot);
    m_dmr.setSrcId(m_id);

    m_embedded.setLC(*m_dmr.getLC());
    m_embedded.setSrcId(m_id);
    m_embedded.setDstId(0U);

    return true;
}

bool CXLXVoice::linked(CDMRData& data, const std::string& callsign, unsigned int number, unsigned int reflector)
{
    if (m_wavData != NULL)
        return false;

    char filename[100U];
    if (reflector >= 4001U && reflector <= 4026U) {
        char c = ('A' + (reflector % 100U)) - 1U;
        ::sprintf(filename, "%s/%s_XLX%u_%c.wav", m_directory.c_str(), m_language.c_str(), number, c);
    } else {
        ::sprintf(filename, "%s/%s_XLX%u.wav", m_directory.c_str(), m_language.c_str(), number);
    }

    FILE* fp = ::fopen(filename, "rb");
    if (fp == NULL) {
        LogWarning("Cannot open %s, using unlinked", filename);
        return unlinked(data);
    }

    unsigned char buffer[WAV_DATA_LENGTH];

    ::fseek(fp, 44, SEEK_SET);

    m_wavLength = 0U;
    while (::fread(buffer, 1U, WAV_DATA_LENGTH, fp) == WAV_DATA_LENGTH)
        m_wavLength++;

    ::fclose(fp);

    m_wavData = new unsigned char[m_wavLength * WAV_DATA_LENGTH];
    ::memset(m_wavData, 0x00U, m_wavLength * WAV_DATA_LENGTH);

    fp = ::fopen(filename, "rb");
    if (fp == NULL) {
        LogWarning("Cannot open %s, using unlinked", filename);
        delete[] m_wavData;
        m_wavData = NULL;
        return unlinked(data);
    }

    ::fseek(fp, 44, SEEK_SET);

    for (unsigned int i = 0U; i < m_wavLength; i++) {
        unsigned char* p = m_wavData + (i * WAV_DATA_LENGTH);
        if (::fread(p, 1U, WAV_DATA_LENGTH, fp) != WAV_DATA_LENGTH) {
            LogWarning("Cannot read %s, using unlinked", filename);
            ::fclose(fp);
            delete[] m_wavData;
            m_wavData = NULL;
            return unlinked(data);
        }
    }

    ::fclose(fp);

    m_pos      = 0U;
    m_seqNo    = 0U;
    m_dstId    = reflector;
    m_sent     = false;

    m_dmr.setDstId(reflector);
    m_embedded.setDstId(reflector);

    m_timer.start();

    data = m_dmr;
    return true;
}

bool CXLXVoice::unlinked(CDMRData& data)
{
    if (m_wavData != NULL)
        return false;

    char filename[100U];
    ::sprintf(filename, "%s/%s_unlinked.wav", m_directory.c_str(), m_language.c_str());

    FILE* fp = ::fopen(filename, "rb");
    if (fp == NULL) {
        LogWarning("Cannot open %s", filename);
        return false;
    }

    unsigned char buffer[WAV_DATA_LENGTH];

    ::fseek(fp, 44, SEEK_SET);

    m_wavLength = 0U;
    while (::fread(buffer, 1U, WAV_DATA_LENGTH, fp) == WAV_DATA_LENGTH)
        m_wavLength++;

    ::fclose(fp);

    m_wavData = new unsigned char[m_wavLength * WAV_DATA_LENGTH];
    ::memset(m_wavData, 0x00U, m_wavLength * WAV_DATA_LENGTH);

    fp = ::fopen(filename, "rb");
    if (fp == NULL) {
        LogWarning("Cannot open %s", filename);
        delete[] m_wavData;
        m_wavData = NULL;
        return false;
    }

    ::fseek(fp, 44, SEEK_SET);

    for (unsigned int i = 0U; i < m_wavLength; i++) {
        unsigned char* p = m_wavData + (i * WAV_DATA_LENGTH);
        if (::fread(p, 1U, WAV_DATA_LENGTH, fp) != WAV_DATA_LENGTH) {
            LogWarning("Cannot read %s", filename);
            ::fclose(fp);
            delete[] m_wavData;
            m_wavData = NULL;
            return false;
        }
    }

    ::fclose(fp);

    m_pos      = 0U;
    m_seqNo    = 0U;
    m_dstId    = 0U;
    m_sent     = false;

    m_dmr.setDstId(0U);
    m_embedded.setDstId(0U);

    m_timer.start();

    data = m_dmr;
    return true;
}

void CXLXVoice::clock(unsigned int ms)
{
    if (m_wavData == NULL)
        return;

    m_timer.clock(ms);

    if (m_timer.isRunning() && m_timer.hasExpired()) {
        if (!m_sent) {
            addData(DT_VOICE_LC_HEADER);
            for (unsigned int i = 0U; i < 5U; i++)
                addData(DT_VOICE);
            m_sent = true;
        } else {
            if (m_pos >= m_wavLength) {
                addData(DT_TERMINATOR_WITH_LC);
                delete[] m_wavData;
                m_wavData = NULL;
                m_wavLength = 0U;
                m_pos = 0U;
                m_seqNo = 0U;
                m_timer.stop();
            } else {
                addData(DT_VOICE);
            }
        }

        m_timer.start();
    }
}

void CXLXVoice::addData(unsigned char dataType)
{
    unsigned char buffer[DMR_FRAME_LENGTH_BYTES];

    switch (dataType) {
    case DT_VOICE_LC_HEADER: {
            m_dmr.setDataType(DT_VOICE_LC_HEADER);
            m_dmr.setSeqNo(m_seqNo);
            m_dmr.getData(buffer);
            unsigned char lc[9U];
            m_embedded.getData(lc);
            for (unsigned int i = 0U; i < 9U; i++)
                buffer[i + 12U] = lc[i];
            m_seqNo++;
        }
        break;

    case DT_VOICE: {
            if ((m_pos % DMR_FRAME_PER) == 0U) {
                unsigned char lc[9U];
                m_embedded.getData(lc);
                m_dmr.setDataType(DT_VOICE_SYNC);
                m_dmr.setSeqNo(m_seqNo);
                m_dmr.getData(buffer);
                for (unsigned int i = 0U; i < 7U; i++)
                    buffer[i + 13U] = lc[i];
            } else {
                m_dmr.setDataType(DT_VOICE);
                m_dmr.setSeqNo(m_seqNo);
                m_dmr.getData(buffer);
            }

            if (m_pos < m_wavLength) {
                unsigned char* p = m_wavData + (m_pos * WAV_DATA_LENGTH);
                for (unsigned int i = 0U; i < 3U; i++) {
                    ::memcpy(buffer + 6U + (i * 7U), p, 7U);
                    p += WAV_DATA_LENGTH / 3U;
                }
                m_pos++;
            }

            m_seqNo++;
        }
        break;

    case DT_TERMINATOR_WITH_LC: {
            m_dmr.setDataType(DT_TERMINATOR_WITH_LC);
            m_dmr.setSeqNo(m_seqNo);
            m_dmr.getData(buffer);
            unsigned char lc[9U];
            m_embedded.getData(lc);
            for (unsigned int i = 0U; i < 9U; i++)
                buffer[i + 12U] = lc[i];
            m_seqNo = 0U;
        }
        break;

    default:
        return;
    }

    LogDebug("Voice frame sent, type: %u, seq: %u, pos: %u/%u", dataType, m_seqNo, m_pos, m_wavLength);
}
